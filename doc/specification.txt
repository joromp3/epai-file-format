# Extensible Package for Animated Images -- Specification

(revision 0.1 (version code 0x00) *DRAFT*) *WORK IN PROGRESS*


Author: Jasen Borisov
Date: November 2014


## Introduction

Extensible Package for Animated Images (EPAI) is a file format intended
primarily for games, graphics developers, and graphics software. It aims
to allow for maximum flexibility in implementation and use; to provide a
standard that can be adapted for a large variety of use cases common in
games and graphics applications, especially on embedded systems.

Important features of the format:
- Multiple images can be packed into one file.
- Each image can be optionally animated.
 - Full control over keyframes, to support skips and loops.
 - Control over frame properties such as duration, position, dimensions.
- Flexibility with pixel data format.
 - Mix of integer/float with varying sizes/precisions for each channel.
 - Any combination of up to 16 channels per pixel, allowing each pixel
   to carry information like alpha, depth, lighting/shading data, etc,
   alongside RGB color.
- Text metadata.
- Reserved private use space, giving the ability to extend and adapt to
  custom applications.


## Format Overview

The file is a tree of sections. Every part of the file (including the
file signature) is defined as a section. Certain section types can
contain other nested sections.


### Note on Private Use

It is part of the design goals for the format to allow it to be
adaptable to fit domain-specific needs. Therefore, there are many parts
of this specification which explicitly define values or fields reserved
for private use.

In general, files using such "private use" values are considered to be
non-standard and likely unparsable by standard implementations. The
exception to this are private use section types in the optional range,
as implementations are free to ignore optional sections (see below). Any
other minor exceptions may be noted within the specifications of the
individual section types.


### Section Types

Every section begins with a type code, which is an 8-bit unsigned
integer value.

What follows after the first byte differs for each section type.

Sections can be either mandatory or optional. This is indicated by the
most significant bit of the section type code, as follows:

- MSB 1 (range 0x80-0xFF) indicates a mandatory section.
- MSB 0 (range 0x00-0x7F) indicates an optional section.

Mandatory section types are essential to the file and must be parsed in
order to display an adequate representation of the encoded information.

Optional section types contain information which is not essential. An
adequate minimal representation of the encoded information can be
produced by a decoding implementation even if these section types are
ignored.

All optional sections must contain a 32-bit unsigned integer value
immediately after the section type value, to indicate the length of the
remainder of the section. This is to permit implementations to easily
skip the section.

Section types in the ranges 0x00-0x3F and 0x80-0xBF are reserved for use
by the standard. Implementations must not define custom private use
sections with type codes in those ranges.

Section types in the ranges 0x40-0x7F and 0xC0-0xFF are reserved for
private use, and may be used for any implementation-specific purpose.
These values will never be used by the official standard.

All mandatory sections in an input file must be parsed. All
implementations must implement support for all mandatory section types
defined in this document. Mandatory sections not defined in this
document are allowed in files as long as their type code falls in the
private use range. Implementations must refuse to parse input files
containing mandatory sections from the private use range which they do
not support, or files which contain mandatory sections which are neither
defined in this document nor fall in the defined private use range.

Implementations are not required to implement support for any optional
section types, including ones defined in this document. Implementations
are allowed to ignore optional sections in a file for any reason. When
modifying existing files, implementations must remove any optional
sections which they do not support.

Certain section types may contain references to other sections defined
before them, for various reasons. These references point to a specific
section type, and take the form of the index of the section in the order
of appearance in the file. Sections may only refer to other sections
which appear before them in a file; references pointing to sections
appearing later in the file stream are not allowed. This reference
pointer system prevents duplicate data in a file.

List of all section types:

0x00		zero padding
0x01		checksum
0x02		text metadata
0x03		compressed text
0x04		delta frame
0x05		gamma correction
0x06		spritesheet data
0x07-0x3F	(reserved for future standard use)
0x40-0x7F	(reserved for private use)
0x80		file signature
0x81		pixel format
0x82		palette
0x83		image
0x84		keyframe
0x85-0xBF	(reserved for future standard use)
0xC0-0xFF	(reserved for private use)


## Standard Mandatory Sections

Here follow the exact specifications for each mandatory section type
defined by this standard.


### Section 0x80: File Signature

The file signature is logically considered the parent of all other
sections. It must appear exactly once, at the very beginning of every
file. It ends implicitly when the file ends.

The file signature header has the following syntax:

	Byte:	0	1	2	3
	Hex:	0x80	0x45	0x50	0x41

	Byte:	4	5	6	7
	Hex:	0x49	0x0D	0x0A	0x0A

	Byte:	8	8/9 (16-bit unsigned integer)
	Hex:	0x00	0xAF00

	Total length: 11 bytes.

Byte 0 is the section type. It is non-ASCII and prevents the file from
being misidentified as plain text.

Bytes 1-4 spell out "EPAI" in ASCII, serving as a human-readable
identification of the file format.

Bytes 5-6 are a DOS CRLF line ending. They allow to check if the file
has been corrupted by DOS->UNIX line ending conversion.

Byte 7 is a UNIX LF line ending. It allows to check if the file has been
corrupted by UNIX->DOS line ending conversion.

Byte 8 is the version of the format specification that the file follows.

Bytes 9-10 are a single 16-bit unsigned integer value which serves as an
endian marker, to indicate endianness of any multi-byte values that
appear later in the file. The zero byte in the endian marker can be used
to detect a type of file corruption where zero bytes are removed during
transmission.

The file must be encoded in either big or little endian; no other endian
formats (such as PDP/mixed endian) are allowed.

The implementation must do endian conversion for all multi-byte values
in the file if the endian marker in the file signature indicates an
endianness that does not match the one of the decoding machine.

After the header specified above, immediately follow all other sections
of the file. Logically, all other sections can be considered as
contained within a global file signature section which ends at the end
of the file.


### Section 0x81: Pixel Format

A section of this type is used to define a pixel format to be used for
encoding pixel data in other sections later in the file.

At least one pixel format section must be present in every file. The
maximum number of pixel format sections in one file is 256.

This section type cannot be contained in any section other than 0x80
(File Signature). This section type cannot contain any child sections.

Pixel format sections have the following syntax:

	Size	Value
	1 byte	0x81
	1 byte	number of channels
	1 byte	channel #0
	...	... more channels ...

Byte 0 is the section type code.

Byte 1 is the number of channels in the pixel format. The maximum number
of channels in a pixel format is 16, as there are only 16 channel type
values. More on that below.

After that follow the channel format definitions, one byte each. They
are encoded as follows:

	0123 4567	(most significant bit is labeled 0)
	^--- ^---
	DT   CT

The channel format definitions are composed of two values, 4 bits each,
a Data Type and a Channel Type.

The data type value indicates the binary format for the channel data. It
can have one of the following values:

	Value	Meaning
	0000	1-bit unsigned integer
	0001	4-bit unsigned integer
	0010	8-bit unsigned integer
	0011	16-bit unsigned integer
	0100	32-bit unsigned integer
	0101	reserved for future standard use
	0110	private use
	0111	private use
	1000	16-bit half float
	1001	32-bit single float
	1010	64-bit double float
	1011	reserved for future standard use
	1100	private use
	1101	private use
	1110	private use
	1111	private use

The channel type value indicates the intended meaning of the information
encoded in the channel. It can have one of the following values:

	Value	Meaning
	0000	gray / color index / private use ; see below
	0001	red
	0010	green
	0011	blue
	0100	alpha
	0101	depth
	0110	mask / stencil
	0111	private use
	1000	? x coordinate / normal
	1001	? y coordinate / normal
	1010	? z coordinate / normal
	1011	? heightmap
	1100	? diffuse
	1101	? specularity
	1110	private use
	1111	private use

0000 is a special multi-purpose value. If none of the RGB channel types
exist in the same pixel format section, it is interpreted as either
grayscale or color index, depending on whether or not there exists a
palette section elsewhere in the file which is associated with the pixel
format section (see the palette section specification). If any of the
RGB channels are defined, 0000 becomes a private use value.

There are three (or four if counting 0000) private use values available
to implementations for custom needs. The meanings for channel types
>=1000 (marked with '?' above) are only suggested (as those are
relatively common for graphics in games). If the standard three private
use values are insufficient for the needs of an implementation, the
values marked with '?' above may also be used for private use. The '?'
above indicates that those meanings are to be treated as a convention as
opposed to a requirement.

More than one channel definition with the same 4-bit channel type value
is not allowed within the same pixel format section.

Note that none of the above channel types are required in a pixel
format. Every pixel format must contain at least one channel, but it can
be of any type. A pixel format with no color channels is perfectly
valid, for example.


### Section 0x82: Palette

A section of this type defines a palette to be used with pixel formats
which contain a color-index channel to be used as color information.

This section cannot contain other sections, and can only appear globally
as a child of 0x80 (File Signature).

Palette sections have the following syntax:

	Size	Value
	1 byte	0x82
	1 byte	number of associated pixel formats
	1 byte	reference to pixel format section
	...	... more references ...
	1 byte	number of colors
*	3 bytes	color encoded in 24-bit (8 bpc) RGB
OR	12 byte	color encoded in 32-bit float RGB
	...	... more colors ...

Byte 0 is the section type code.

Byte 1 is the number of pixel format sections which use this section as
their palette data. This number can be zero, which, while likely to be
useless practically (resulting in an extraneous palette section), is
considered valid.

After that follow references to all the pixel format sections which use
this section as their palette data. All of these associated pixel
formats must contain a channel of type 0000 and no channels with types
in the range 0001-0011 (RGB). The 0000 channel can only have a data type
in the range 0000-0001 (unsigned integer with either 4 or 8 bits size).

After that follows an 8-bit unsigned integer which represents the number
of colors in the palette minus one. Therefore, the maximum number of
colors a palette can contain in 256 and the minimum is one. However, the
number of colors in the palette is completely independent from the size
of the color index channel in the associated pixel formats. Extra colors
are simply ignored, and missing colors must be interpreted as fully
transparent.

After that follow the definitions of all the colors in the palette, each
taking 1 byte for red, 1 byte for green, and 1 byte for blue, in that
order.


### Section 0x83: Image

This section type is used to store an image (animated or not).

There must be at least one image section in every file. The maximum
number of image sections in the same file is 256.

This section can only be contained within section type 0x80 (File
Signature).  It can contain multiple sections of type 0x84 (Keyframe),
0x04 (Delta Frame), and 0x02 (Compressed Text), as well as no more than
one section of type 0x01 (Text Metadata), and type 0x06 (Spritesheet
Data). It must contain at least one section of type 0x84 (Keyframe). No
section of type 0x04 (Delta Frame) may appear before the first section
of type 0x84 (Keyframe).

Image sections have the following syntax:

	Size	Value
	1 byte	0x83
	2 bytes	image width
	2 bytes image height
	2 bytes number of frames in animation (1 for static images)
	1 byte	reference to pixel format for image data
	4 bytes name of compression algorithm used for frame data
	... optional non-frame sections ...
	... first keyframe ...
	... more frames and/or keyframes ...

The first byte is the section type code.

After it follow two 16-bit unsigned integers representing the image
dimensions. Then follows the total number of frames (keyframe and frame
sections) in the image. All of these values must be nonzero.

Then follows one byte referring by index to the pixel format section
that describes the format of the pixel data in the image's frames.

Then follow four ASCII characters representing the name of the
compression algorithm used for the last stage of encoding the pixel data
in each frame.  The four characters must be either uppercase or digits.
Names shorter than four characters must be padded by spaces on the left.
The following compression algorithms are standard and should be
supported by all implementations:

	Name	Description
	"COPY"	No compression applied
	"ZLIB"	Standard Deflate algorithm as implemented by zlib

Implementations are allowed to implement their own selection of
additional algorithms beyond the ones above if they so desire.

Then follow any optional sections (such as text metadata, compressed
text, spritesheet data) in any order. All such sections must appear
before the first keyframe section in the image.

Then follows the first keyframe section. In the case of a static image,
there will be no more frames after it. In the case of an animated image,
it will be followed by additional frames (keyframes or delta frames).

All frames in the image must appear in their exact playback order.

An animation can contain a maximum of 65535 (2^16-1) frames, at least
one of which (the first) is a keyframe. Whether to encode each
subsequent animation frame as a keyframe or a delta frame is a choice
left to the encoding implementation.

Supporting animated images is not a requirement for implementations. If
an implementation only supports static images, it may decode only the
first keyframe and ignore all other frames.


### Section 0x84: Keyframe

This section type contains the actual pixel data for an animation frame,
encoded in a way that does not refer to any other frame in the image.
This is the section type to use for the first frame in any animation,
for static images, and for intermediate animation frames for which the
ability to skip to them during playback without having to decode other
frames is desired.

This section type may only appear contained within sections of type 0x83
(Image). Every image section must contain at least one section of this
type (representing the first frame of an animation or a static image).
More such sections can be placed within an image if and as desired. This
section type cannot contain other sections.

Keyframe sections have the following syntax:

	Size	Value
	1 byte	0x84
	2 bytes	frame duration in microseconds
	... compressed datastream ...

The first byte is the section type code.

Then follows a 16-bit unsigned integer value representing the duration
of the frame, in microseconds. During playback, the frame should ideally
be displayed for this duration of time.

Then follows the compressed datastream, containing a filter type array
and the encoded pixel data, compressed in one solid chunk with the
algorithm specified in the image section in which the keyframe section
is contained.

The first part of the compressed datastream is an array of 8-bit
unsigned integer values indicating the filtering algorithm used for each
row of pixels. This allows the filtering algorithm to be adaptively
changed with every row of pixels for optimal compressability of the
data. The size of the array is equal to the height of the frame.

More information on filtering will follow further below.

After the filter type array follows the actual pixel data, encoded as
follows:

Every pixel must carry data in the format referenced by the image
section that this section is contained in.

Pixels are arranged and packed as follows:

Pixels are packed in one of three ways, depending on whether the pixel
format contains any 1-bit or 4-bit integer channels.

If the pixel format contains at least one 1-bit channel, pixels are
encoded in groups of eight. The data of 1-bit channels is encoded first,
packed into bytes, in the order specified in the pixel format. Then
follow any 4-bit channels, if present, also packed into bytes, in the
order specified in the pixel format. Lastly follow all other channels,
in the order specified in the pixel format.

When packing, pixels in the group are ordered left to right from the
most significant to the least significant bits in the byte.

Multi-byte values must be in the byte order specified by the endian
marker in the file signature.

If the frame width is not a multiple of eight, the values of the
remaining pixels in the last group of the scanline are undefined.

For example, every group of eight pixels in a frame using a pixel format
that defines, in this order, 4-bit red (R), 4-bit green (G), 4-bit blue
(B), 1-bit alpha (A), 1-bit stencil (X), and 8-bit depth (Z), will be
encoded as follows:

Byte #:  |-Byte 0-||-Byte 1-||-Byte 2-||-Byte 3-||-Byte 4-||-Byte 5-|
Channel:  AAAAAAAA  XXXXXXXX  RRRRRRRR  RRRRRRRR  RRRRRRRR  RRRRRRRR
Pixel #:  01234567  01234567  00001111  22223333  44445555  66667777

Byte #:  |-Byte 6-||-Byte 7-||-Byte 8-||-Byte 9-||-Byte 10||-Byte 11|
Channel:  GGGGGGGG  GGGGGGGG  GGGGGGGG  GGGGGGGG  BBBBBBBB  BBBBBBBB
Pixel #:  00001111  22223333  44445555  66667777  00001111  22223333

Byte #:  |-Byte 12||-Byte 13||-Byte 14||-Byte 15||-Byte 16||-Byte 17|
Channel:  BBBBBBBB  BBBBBBBB  ZZZZZZZZ  ZZZZZZZZ  ZZZZZZZZ  ZZZZZZZZ
Pixel #:  44445555  66667777  00000000  11111111  22222222  33333333

Byte #:  |-Byte 12||-Byte 13||-Byte 14||-Byte 15|
Channel:  ZZZZZZZZ  ZZZZZZZZ  ZZZZZZZZ  ZZZZZZZZ
Pixel #:  44444444  55555555  66666666  77777777

If the pixel format does not contain any 1-bit channels but contains
4-bit channels, then the pixels are encoded in consecutive pairs. First,
the data of each 4-bit channel is packed into bytes, in the channel
order specified in the pixel format. Then follow all other channels.

When packing, pixels are ordered left to right from the most significant
to the least significant bits in the byte.

Multi-byte values must be in the byte order specified by the endian
marker in the file signature.

If the width of the frame is not an even number, then the values of the
second pixel in the last pair is undefined.

For example, every pixel pair in a frame using a pixel format that
defines, in this order, 16-bit alpha (A), 4-bit red (R), 4-bit green
(G), 4-bit blue (B), and 8-bit depth (Z), will be encoded as follows:

Byte #:  |-Byte 0-||-Byte 1-||-Byte 2-||-Byte 3-||-Byte 4-||-Byte 5-|
Channel:  RRRRRRRR  GGGGGGGG  BBBBBBBB  AAAAAAAA  AAAAAAAA  AAAAAAAA
Pixel #:  00001111  00001111  00001111  00000000  00000000  11111111

Byte #:  |-Byte 6-||-Byte 7-||-Byte 8-|
Channel:  AAAAAAAA  ZZZZZZZZ  ZZZZZZZZ
Pixel #:  11111111  00000000  11111111

If the pixel format contains neither 1-bit nor 4-bit channels, then
pixels are encoded individually, in order, with channels in the order
specified in the pixel format.

Multi-byte values must be in the byte order specified by the endian
marker in the file signature.

The actual values of each channel in each pixel are determined by the
filtering algorithm used. Every row of pixels can use a different
filtering algorithm, as indicated by the corresponding element in the
filter type array preceding the pixel data in the keyframe. The
following filter type values are defined:

	Value	Meaning
	0x00	None
	0x01	Delta left
	0x02	Delta up
	0x03	Delta diagonal
	0x04	Delta max
	0x05	Average 2
	0x06	Average 3
	0x07	Paeth
	0x08-0x7F	Reserved for future standard use
	0x80-0xFF	Private use

Filtering is applied per-channel (not per-byte!), using arithmetic
appropriate to the channel's data type.

The standard filtering algorithms are defined as follows:

	Algo	Value
	0x00	0
	0x01	L
	0x02	U
	0x03	D
	0x04	min(L, U, D)
	0x05	median(L, U, D)
	0x06	max(L, U, D)
	0x07	(L + U) / 2
	0x08	(L + U + D) / 3
	0x09	paeth(L, U, D)

where L is the value of the corresponding channel in the pixel to the
left of the current pixel, U is the value of the corresponding channel
in the pixel above the current pixel, and D is the value of the
corresponding channel in the pixel diagonally up and left of the current
pixel.

During encoding, the value calculated above is subtracted from the
original value of each channel in the current pixel. During decoding, it
is added to the filtered value in the datastream to restore the original
value as it was before encoding.

All of the above filters are fully lossless for all integer channel
types. For floating point channel types, filters other than 0x00 could
result in losses due to rounding imprecisions.

The filter type array and the filtered pixel data are then compressed as
a single solid chunk using the algorithm specified in the image section
that contains the keyframe section.


## Standard Optional Sections

Here follow the exact specifications for each optional section type
defined by this standard.


### Section 0x00: Zero Padding

This section type allows padding to be added to files if they need to be
of a certain size.

This is the only way to add padding legally; anything else will likely
confuse decoding implementations (as any value outside of a section is
considered the beginning of a new section). The minimum number of bytes
of padding that can be inserted into a file is 5, as this considered an
"optional section" and therefore needs 1 byte for type code and 4 bytes
for length.

Zero padding sections have the following syntax:

	Size	Value
	1 byte	0x00
	4 bytes	length of remainder of section
	n bytes	... zeroes ...

Byte 0 is the section type code. The next 4 bytes are the standard
section length that must be present for all optional sections; in this
case, the number of zeroes following after it.

The remainder of the section must be filled with zeroes. Any other value
is considered invalid. It is recommended that implementations check the
contents of zero padding sections to ensure that they are actually
filled with zeroes.


### Section 0x01: Section Checksums

This section type allows checksums to be included in a file, to ensure
data correctness.

This section can only appear globally as a child of section type 0x80
(File Signature). It can appear at most once per file. It cannot contain
any other sections.

This section contains checksums for individual other sections
in the file. It can contain multiple checksums for the same section.
Sections are checksummed selectively; there is no restriction on how
many sections this section contains checksums for. The only section
types that checksums are allowed for are 0x03 (Compressed Text) and 0x83
(Image).

The checksums section has the following syntax:

	Size	Value
	1 byte	0x01
	4 bytes	length of remainder of section
	- 1 byte	referenced section type
	- 1 byte	referenced section index
	- n bytes	null terminated string indicating checksum type
	- 1 byte	length of checksum
	- m bytes	checksum as null-terminated hex string
	...	... more checksum records ...

Byte 0 is the section type code.

Bytes 1-4 are the standard optional section length.

After that follow the checksum records. Every checksum record is
composed of multiple values (all the values that begin with a dash above
are part of each record).

The first byte in each record is the type code of the section that the
checksum is for. The second byte is the index/reference to the section
that the checksum is for.

The next part of the record is a null-terminated string indicating the
checksum type/algorithm. It can only contain characters A-Z,0-9.
Examples: "MD5", "SHA256", "CRC32".

It is recommended that implementations support at least the MD5
algorithm and the SHA family of algorithms. Implementations should
quietly ignore checksums that they do not support.

After the type string follows 1 byte indicating the length of the
checksum string.

Then follows the checksum, as a null-terminated ASCII hexadecimal
string.

For compressed text sections, checksum the entire section including type
code and length. For images, prepend the pixel format the image uses to
the image section, both complete with section type, etc.


### Section 0x02: Text Metadata

This section type allows text metadata to be stored. The text in
sections of this type is uncompressed, and therefore, this section type
should only be used for short pieces of textual metadata. If long
amounts of text need to be stored in the file, section type 0x03
(Compressed Text) should be used instead.

The data in this section is organized in key-value pairs. The
specification defines some conventions for common metadata keys.
However, this being an optional section, implementations are free to
parse only the ones they need (or none at all). None of the standard
keys defined below are required to be present in a text metadata
section, and implementations are allowed to add extra keys of their own.

This section type cannot contain other sections. Text metadata sections
may only appear inside sections of type 0x80 (File Signature) and 0x83
(Image). There can be only one global text metadata section. Only one
text metadata section per image is allowed. The global text metadata
section is interpreted to contain metadata about the entire archive.
Text metadata sections which appear inside images are interpreted to
contain metadata about the individual images themselves.

Text metadata sections have the following syntax:

	Size	Value
	1 byte	0x02
	4 bytes	length of remainder of section
	n bytes	null-terminated string (key)
	m bytes	null-terminated UTF-8 string (value)
	...	... more key-value pairs ...

Byte 0 is the section type code.

Bytes 1-4 form the standard optional section length.

Then follow all of the key-value pairs as null-terminated strings. Keys
can only contain characters A-Z,a-z (english alphabet letters, in
ascii), and are case-insensitive. Values are UTF-8 encoded strings and
can contain any Unicode character.

Keys must be shorter than 16 characters. Values can have a maximum
length of 256 bytes. Null-terminating byte is included in both counts,
so the real number of visible characters inside is actually one less.

Duplicate keys are not allowed. Empty strings for keys are not allowed.
Empty strings for values are legal but not recommended.

A text metadata section may contain a maximum of 256 key-value pairs.

A list of standard keys is defined, which should be used for common
metadata information when possible. They are:

Standard keys for the global text metadata section:
- "Title": short (one-line) description of the whole archive.
- "Description": possibly longer description of the whole archive.
- "Encoder": the name of the software used to encode the file.
- "Version": the version of the whole image package.
- "Comment": miscellaneous comment.

Standard keys for per-image text metadata sections:
- "Title" = short (one-line) description of the specific image.
- "Description" = possibly longer description of the specific image.
- "Author" = the name of the image's creator.
- "Software" = the software used to create the content (not encoder!).
- "Copyright": copyright notice.
- "ContentVersion": revision/version number for the image content.
- "Comment" = miscellaneous comment.

The per-image "Author", "Software", and "Copyright" fields can be
specified globally in the global text metadata section, in which case
their values will be interpreted as applying to all images in the
archive which do not specify their own values. This allows to avoid
repetition in an archive in which most or all images would otherwise
have the same values for these fields.

It must be noted that the per-image "Software" field is intended for the
application that the image's creator used to create the content of the
image, which is often different from the software that was used to
encode the file. The global "Encoder" field should be used for the
software that was used to encode the actual file.


### Section 0x03: Compressed Text

// TODO


### Section 0x04: Delta Frame

This section type contains pixel data for an animated image, encoded in
a way that improves data compression, but depends on the previous frame
of the animation to be decoded before it. Therefore, it is not possible
to skip to such a frame during playback without first decoding all
previous frames, starting from the nearest keyframe.

This section can only be contained inside sections of type 0x83 (Image),
and only if there is at least one section of type 0x84 (Keyframe) before
it, in the same image section.

Delta frame sections have the following syntax:

	Size	Value
	1 byte	0x04
	4 bytes	length of remainder of section
	2 bytes	frame duration in microseconds
	2 bytes x-offset
	2 bytes y-offset
	2 bytes frame width
	2 bytes frame height
	... compressed datastream ...

This section is very similar to 0x84 (Keyframe), and will be specified
as a set of differences from it. Please refer to the specification for
0x84 (Keyframe) as you read the text below.

Unlike 0x84 (Keyframe), this section can encode only a sub-rectangle of
the entire image, if only part of the image changes during the current
animation frame. This can improve compression by not reencoding large
areas of pixels that remain unchanged between frames. On playback, the
decoded value of each channel of each pixel in the frame must overwrite
the value of the corresponding channel of the corresponding pixel
already displayed from frames prior. Pixels outside of the rectangle
defined for this frame must remain untouched.

Bytes 7-14 of the section header represent the x coordinate, y
coordinate, width, and height, in this order, of the rectangle within
the entire image that the frame encodes. x+width must not exceed the
width of the entire image and y+height must not exceed the height of the
entire image. These coordinates are measured from left to right (x) and
from top to bottom (y).

Bytes 1-4 are the mandatory section length as required by all optional
section types.

Bytes 5-6 represent the frame duration, in a manner identical to 0x84
(Keyframe).

The compressed datastream is produced in a manner identical to 0x84
(Keyframe), with the following differences:

The number of scanlines encoded is equal to the height specified in this
section's header, as opposed to the height of the entire image. Hence
there are only that many values in the filter type array preceding the
pixel data.

Similarly, the number of pixels in each scanline is equal to the width
specified in this section's header, as opposed to the width of the
entire image.

Additionally, when applying filtering, the input to the algorithm is the
difference between the current pixel's channels and the channels of the
corresponding pixel in the previous frame. Thus, this section encodes
deltas from the previous frame rather than the actual pixels. This
acts as an additional filter step to improve compressability.

Note that these deltas are calculated between the actual values of
pixels between this animation frame and the previous animation frame.
Hence, if the previous frame was also encoded as a section of type 0x04
(Delta Frame), the current frame's deltas must be calculated as
differences from the actual values of the previous frame's pixels, and
not from the deltas that were encoded into it.

Similarly, if the previous frame was also encoded as a section of type
0x04 (Delta Frame), and its crop rectangle is smaller than that of the
current frame, the deltas are calculated as differences from the last
known values of the pixels, from whatever the most recent frame that
encoced them was.


### Section 0x05: Gamma Correction Information

// TODO


### Section 0x06: Spritesheet Data

// TODO


## Rationale and Remarks on Design

Some explanations, personal remarks, and notes about the various design
decisions which had to be made while designing the EPAI format, such as
exactly why certain features were added/omitted from the specification.


### Design Goals

The intended use of this file format is in 2D and 3D games and graphics
development. The format is designed with the following goals in mind:

1. Define a standard for functionality which is commonly needed by the
   target audience of the format.
2. Ease of extensibility and adaptability to custom needs.
3. Ease of implementation and simplicity.
4. Optimizeable for embedded and low-spec systems.

The PNG file format was a major inspiration for a lot of the design
aspects of EPAI.


### Endianness

Both big and little endian encodings are supported to allow the data to
be matched and optimized for decoding on a variety of systems.

Mixed endian encodings are not supported, because they would increase
the complexity unnecessarily and make implementation harder. Very few
modern machine architectures use mixed endian anyway.


### Data Formats for Channels

// TODO explain choice of integer and float formats.


